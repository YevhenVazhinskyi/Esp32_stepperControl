@startuml Error_Recovery_Sequence
!theme plain

title ESP32 Stepper Motor Controller - Error Detection & Recovery Sequence

participant "Main\nTask" as MainTask
participant "Motor\nTask" as MotorTask
participant "BLE\nStack" as BLE
participant "System\nMonitor" as Monitor
participant "Hardware\nFault" as Fault
participant "Error\nHandler" as ErrorHandler
participant "GPIO\nDriver" as GPIO
participant "Recovery\nManager" as Recovery

== Normal Operation ==
activate MainTask
activate MotorTask
activate BLE

MainTask -> MainTask : app_main_task() running
MotorTask -> MotorTask : stepper_motor_task() running
BLE -> BLE : BLE host task running

== Motor Fault Detection ==
loop Continuous Monitoring (every 100ms)
    MainTask -> MotorTask : stepper_motor_is_fault(&g_motor)
    activate MotorTask
    MotorTask -> GPIO : gpio_get_level(fault_pin)
    GPIO --> MotorTask : pin_level
    
    alt Fault pin HIGH (normal)
        MotorTask --> MainTask : false (no fault)
        MainTask -> MainTask : Continue normal operation
    else Fault pin LOW (fault detected)
        MotorTask --> MainTask : true (fault detected!)
        MainTask -> MainTask : ESP_LOGE("Motor fault detected!")
        MainTask -> MainTask : system_status = SYSTEM_STATUS_ERROR
        
        == Immediate Fault Response ==
        MainTask -> MotorTask : Stop current movement
        MotorTask -> MotorTask : motor->is_moving = false
        MotorTask -> MotorTask : motor_stop_pins(motor)
        MotorTask -> GPIO : Set all motor pins LOW
        MotorTask -> GPIO : gpio_set_level(sleep_pin, 0)
        
        == Visual Fault Indication ==
        MainTask -> MainTask : Flash all LEDs as fault indicator
        loop Flash pattern (3 times)
            MainTask -> GPIO : gpio_set_level(LED1-4, 1)
            MainTask -> MainTask : vTaskDelay(200ms)
            MainTask -> GPIO : gpio_set_level(LED1-4, 0)
            MainTask -> MainTask : vTaskDelay(200ms)
        end
    end
    deactivate MotorTask
end

== Error Classification & Recovery ==
MainTask -> ErrorHandler : Classify error type
activate ErrorHandler

ErrorHandler -> ErrorHandler : Determine error severity
ErrorHandler -> ErrorHandler : Error type: MOTOR_HARDWARE_FAULT

== Motor Recovery Procedure ==
ErrorHandler -> Recovery : Start motor recovery
activate Recovery

Recovery -> Recovery : ESP_LOGI("Starting motor recovery...")
Recovery -> Recovery : Initialize retry counter = 0
Recovery -> Recovery : max_retries = 3

loop Recovery Attempts (max 3 times)
    Recovery -> Recovery : ESP_LOGI("Recovery attempt: %d", retry_count + 1)
    Recovery -> Recovery : Wait 5 seconds
    Recovery -> Recovery : vTaskDelay(pdMS_TO_TICKS(5000))
    
    Recovery -> MotorTask : Re-check fault status
    activate MotorTask
    MotorTask -> GPIO : gpio_get_level(fault_pin)
    GPIO --> MotorTask : pin_level
    MotorTask --> Recovery : fault_status
    deactivate MotorTask
    
    alt Fault cleared (pin HIGH)
        Recovery -> Recovery : ESP_LOGI("Motor fault cleared!")
        
        == Recovery Validation ==
        Recovery -> MotorTask : Re-enable motor driver
        activate MotorTask
        MotorTask -> GPIO : gpio_set_level(sleep_pin, 1)
        MotorTask -> MotorTask : Wait 100ms for driver ready
        MotorTask -> MotorTask : Reset position to safe state
        MotorTask -> MotorTask : motor->current_position = 0
        MotorTask -> MotorTask : motor->target_position = 0
        deactivate MotorTask
        
        == Recovery Health Check ==
        Recovery -> MotorTask : Test basic motor functionality
        activate MotorTask
        MotorTask -> MotorTask : stepper_motor_enable(&g_motor)
        MotorTask -> MotorTask : Move small test distance (5 steps)
        MotorTask -> MotorTask : stepper_motor_move_relative(&g_motor, 5)
        
        loop Test movement
            MotorTask -> GPIO : Apply step sequence
            MotorTask -> GPIO : gpio_get_level(fault_pin)
            GPIO --> MotorTask : fault_status
            
            alt No fault during test
                MotorTask -> MotorTask : Continue test movement
            else Fault during test
                MotorTask -> MotorTask : ESP_LOGE("Fault during recovery test")
                MotorTask --> Recovery : TEST_FAILED
                break
            end
        end
        
        MotorTask -> MotorTask : Return to home position
        MotorTask -> MotorTask : stepper_motor_home(&g_motor)
        MotorTask --> Recovery : TEST_PASSED
        deactivate MotorTask
        
        alt Recovery test passed
            Recovery -> Recovery : ESP_LOGI("Motor recovery successful")
            Recovery -> MainTask : system_status = SYSTEM_STATUS_READY
            Recovery -> Recovery : Reset error counters
            Recovery -> Recovery : Log recovery success
            break
        else Recovery test failed
            Recovery -> Recovery : ESP_LOGE("Recovery test failed")
            Recovery -> Recovery : retry_count++
        end
        
    else Fault persists (pin LOW)
        Recovery -> Recovery : ESP_LOGW("Motor fault persists")
        Recovery -> Recovery : retry_count++
        
        alt Max retries reached
            Recovery -> Recovery : ESP_LOGE("Motor recovery failed - max retries")
            Recovery -> MainTask : system_status = SYSTEM_STATUS_ERROR
            Recovery -> Recovery : Disable motor permanently
            Recovery -> MotorTask : motor->enabled = false
            break
        end
    end
end

deactivate Recovery
deactivate ErrorHandler

== BLE Connection Error Scenario ==
group BLE Error Handling
    BLE -> BLE : Connection error detected
    BLE -> ErrorHandler : Report BLE error
    activate ErrorHandler
    
    ErrorHandler -> ErrorHandler : Classify: BLE_CONNECTION_ERROR
    
    alt Critical BLE stack error
        ErrorHandler -> BLE : Attempt stack restart
        BLE -> BLE : nimble_port_stop()
        BLE -> BLE : vTaskDelay(1000ms)
        BLE -> BLE : nimble_port_init()
        BLE -> BLE : ble_peripheral_init()
        
        alt BLE restart successful
            BLE -> BLE : ESP_LOGI("BLE stack recovered")
            BLE -> BLE : Resume advertising
            ErrorHandler -> ErrorHandler : Recovery successful
        else BLE restart failed
            BLE -> BLE : ESP_LOGE("BLE recovery failed")
            ErrorHandler -> MainTask : Continue with BLE disabled
            ErrorHandler -> ErrorHandler : System runs motor-only mode
        end
        
    else Simple connection issue
        ErrorHandler -> BLE : Restart advertising
        BLE -> BLE : ble_advertise()
        BLE -> BLE : ESP_LOGI("BLE advertising restarted")
        ErrorHandler -> ErrorHandler : Recovery successful
    end
    
    deactivate ErrorHandler
end

== System Resource Error ==
group Memory Error Handling
    Monitor -> Monitor : Check system resources
    activate Monitor
    Monitor -> Monitor : esp_get_free_heap_size()
    Monitor -> Monitor : uxTaskGetStackHighWaterMark()
    
    alt Memory critically low
        Monitor -> ErrorHandler : Report memory shortage
        activate ErrorHandler
        
        ErrorHandler -> ErrorHandler : ESP_LOGE("Critical memory shortage")
        ErrorHandler -> ErrorHandler : Free non-essential resources
        ErrorHandler -> ErrorHandler : Reduce queue sizes
        ErrorHandler -> ErrorHandler : Disable test functionality
        
        ErrorHandler -> Monitor : Check memory after cleanup
        Monitor -> Monitor : esp_get_free_heap_size()
        
        alt Memory recovered
            Monitor --> ErrorHandler : Memory improved
            ErrorHandler -> ErrorHandler : ESP_LOGI("Memory situation improved")
            ErrorHandler -> MainTask : Continue with reduced functionality
        else Memory still critical
            Monitor --> ErrorHandler : Memory still low
            ErrorHandler -> ErrorHandler : ESP_LOGE("Memory recovery failed")
            ErrorHandler -> MainTask : System restart required
            ErrorHandler -> ErrorHandler : esp_restart()
        end
        
        deactivate ErrorHandler
    end
    deactivate Monitor
end

== Post-Recovery Monitoring ==
alt Recovery successful
    MainTask -> MainTask : Resume normal operation
    MainTask -> MainTask : Enhanced monitoring mode
    
    loop Enhanced Monitoring (every 50ms for 60s)
        MainTask -> MotorTask : Check system stability
        MainTask -> BLE : Verify BLE functionality
        MainTask -> MainTask : Monitor error patterns
        
        alt Recurring error detected
            MainTask -> MainTask : ESP_LOGW("Recurring error pattern")
            MainTask -> ErrorHandler : Escalate to higher severity
        else System stable
            MainTask -> MainTask : Continue monitoring
        end
    end
    
    MainTask -> MainTask : Return to normal monitoring (100ms)
    MainTask -> MainTask : ESP_LOGI("System stabilized after recovery")
    
else Recovery failed
    MainTask -> MainTask : Enter safe mode
    MainTask -> MainTask : Disable all non-essential functions
    MainTask -> MainTask : Log detailed error information
    MainTask -> MainTask : system_status = SYSTEM_STATUS_ERROR
    
    loop Safe Mode Operation
        MainTask -> MainTask : Minimal system operation
        MainTask -> MainTask : Basic status logging only
        MainTask -> MainTask : vTaskDelay(1000ms)
    end
end

deactivate BLE
deactivate MotorTask
deactivate MainTask

note over MainTask, Recovery : Error handling complete\nSystem continues with appropriate operational mode

@enduml 