@startuml Structure_Overview
!theme plain

title ESP32 Stepper Motor Controller - Core Data Structures

' Main data structure - the heart of the system
class stepper_motor_t <<Core Structure>> {
    ==Hardware Configuration==
    + gpio_num_t ain1_pin
    + gpio_num_t ain2_pin  
    + gpio_num_t bin1_pin
    + gpio_num_t bin2_pin
    + gpio_num_t sleep_pin
    + gpio_num_t fault_pin
    ==Runtime State==
    + int16_t current_position
    + int16_t target_position
    + uint16_t speed_delay_ms
    + int16_t max_position
    + int16_t min_position
    + uint8_t current_step
    + bool is_moving
    + bool direction
}

' Control enumerations
enum motor_command_t <<Command Types>> {
    MOTOR_CMD_STOP = 0
    MOTOR_CMD_MOVE_ABSOLUTE = 1
    MOTOR_CMD_MOVE_RELATIVE = 2
    MOTOR_CMD_HOME = 3
    MOTOR_CMD_SET_SPEED = 4
    MOTOR_CMD_ENABLE = 5
    MOTOR_CMD_DISABLE = 6
}

enum motor_status_t <<Status Types>> {
    MOTOR_STATUS_IDLE = 0
    MOTOR_STATUS_MOVING = 1
    MOTOR_STATUS_ERROR = 2
    MOTOR_STATUS_DISABLED = 3
}

enum system_status_t <<System States>> {
    SYSTEM_STATUS_INIT = 0
    SYSTEM_STATUS_READY = 1
    SYSTEM_STATUS_RUNNING = 2
    SYSTEM_STATUS_ERROR = 3
    SYSTEM_STATUS_TESTING = 4
}

' Internal message structure for thread-safe communication
class motor_cmd_msg_t <<Queue Message>> {
    + motor_command_t command
    + int16_t parameter
}

' Configuration structures (compile-time constants)
class HardwareConfig <<Static Config>> {
    + DEFAULT_MOTOR_AIN1 : GPIO_NUM_26
    + DEFAULT_MOTOR_AIN2 : GPIO_NUM_27
    + DEFAULT_MOTOR_BIN1 : GPIO_NUM_14
    + DEFAULT_MOTOR_BIN2 : GPIO_NUM_12
    + DEFAULT_MOTOR_SLEEP : GPIO_NUM_13
    + DEFAULT_MOTOR_FAULT : GPIO_NUM_25
    --
    + DEFAULT_LED1_GPIO : GPIO_NUM_2
    + DEFAULT_LED2_GPIO : GPIO_NUM_4
    + DEFAULT_LED3_GPIO : GPIO_NUM_5
    + DEFAULT_LED4_GPIO : GPIO_NUM_18
}

class MotorSpecs <<Motor Constants>> {
    + STEPS_PER_REVOLUTION : 200
    + THREAD_PITCH_MM : 2.0
    + STROKE_LENGTH_MM : 50
    + STEPS_PER_MM : 100
    + DEFAULT_SPEED : 10
    + MIN_SPEED : 1
    + MAX_SPEED : 1000
}

class SystemInfo <<System Constants>> {
    + DEVICE_NAME : "ESP32_StepperMotor"
    + FIRMWARE_VERSION : "1.0.0"
    + BLE_DEVICE_NAME : DEVICE_NAME
}

' Application state
class MainApplication <<Application Context>> {
    - system_status_t system_status
    - stepper_motor_t g_motor
}

' BLE runtime state
class BLEState <<Runtime State>> {
    - uint16_t conn_handle
    - bool is_connected
    - uint8_t led_states[4]
    - stepper_motor_t* motor_ref
}

' Data flow relationships
stepper_motor_t --> HardwareConfig : "initialized from"
stepper_motor_t --> MotorSpecs : "configured by"
motor_cmd_msg_t --> motor_command_t : "contains"
MainApplication *-- stepper_motor_t : "owns"
MainApplication --> system_status_t : "tracks"
BLEState --> stepper_motor_t : "references"

' State transitions
system_status_t ..> stepper_motor_t : "controls"
motor_command_t ..> stepper_motor_t : "modifies"
stepper_motor_t ..> motor_status_t : "reports"

' Memory layout notes
note top of stepper_motor_t : Main motor control structure\n• 32 bytes total size\n• GPIO pins: 6 bytes\n• Position data: 10 bytes\n• Control flags: 3 bytes
note right of motor_cmd_msg_t : FreeRTOS queue message\n• 3 bytes total\n• Thread-safe communication\n• Asynchronous commands
note bottom of HardwareConfig : Compile-time constants\n• No runtime memory usage\n• Centralized configuration\n• Easy hardware porting

' Data size annotations
stepper_motor_t : Size: ~32 bytes
motor_cmd_msg_t : Size: 3 bytes  
BLEState : Size: ~20 bytes
MainApplication : Size: ~36 bytes

@enduml 